Kadanes Algorithm
Given an integer array arr[]. You need to find the maximum sum of a subarray.

class Solution {
    int maxSubarraySum(int[] arr) {
        // Your code here
        int curr=arr[0];
        int m=arr[0];
        for (int i=1;i<arr.length;i++){
            curr=Math.max(curr+arr[i],arr[i]);
            m=Math.max(m,curr);
        }
        return m;
        
    }
}

*************************************************************************************
class Solution:
    ##Complete this function
    #Function to find the sum of contiguous subarray with maximum sum.
    def maxSubArraySum(self,arr):
        n=arr[0]
        m=arr[0]
        for i in range(1,len(arr)):
            n=max(n+arr[i],arr[i])
            m=max(n,m)
        return m

---------------------------------------------------------------------------------------------------------------------------------------------------------------

Array Duplicates
Difficulty: EasyAccuracy: 18.95%Submissions: 832K+Points: 2Average Time: 20m
Given an array arr of integers, find all the elements that occur more than once in the array. If no element repeats, return an empty array.

class Solution:
    def findDuplicates(self, arr):
        # code here
        d={}
        l=[]
        for i in arr:
            if i in d:
                l.append(i)
            else:
                d[i]=1
        return l

---------------------------------------------------------------------------------------------------------------------------------------------------------------

Union of Arrays with Duplicates
Difficulty: EasyAccuracy: 42.22%Submissions: 441K+Points: 2Average Time: 10m
Given two arrays a[] and b[], the task is to find the number of elements in the union between these two arrays.

The Union of the two arrays can be defined as the set containing distinct elements from both arrays. If there are repetitions, then only one element occurrence should be there in the union.

Note: Elements of a[] and b[] are not necessarily distinct.

class Solution:    
    def findUnion(self, a, b):
        # code here
        
        l=set(a+b)
        return len(l)

----------------------------------------------------------------------------------------------------------------------------------------------------------------
Palindrome String
Difficulty: EasyAccuracy: 51.21%Submissions: 401K+Points: 2
You are given a string s. Your task is to determine if the string is a palindrome. A string is considered a palindrome if it reads the same forwards and backwards.

#User function Template for python3
class Solution:
    def isPalindrome(self, s: str) -> bool:
        # code here
        l=""
        for i in range(len(s)-1,-1,-1):
            l+=s[i]
        return s==l
-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Two Sum - Pair with Given Sum
Difficulty: EasyAccuracy: 30.61%Submissions: 383K+Points: 2Average Time: 20m
Given an array arr[] of positive integers and another integer target. Determine if there exist two distinct indices such that the sum of their elements is equal to the target.
class Solution:
    def twoSum(self, arr, target):
        # code here
        if len(arr)<2:
            return False 
        l=set()
        for i in arr:
            if i in l:
                return True
            else:
                l.add(target-i)
        return False
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
Middle of a Linked List
Difficulty: EasyAccuracy: 57.93%Submissions: 374K+Points: 2Average Time: 20m
Given the head of a linked list, the task is to find the middle. For example, the middle of 1-> 2->3->4->5 is 3. If there are two middle nodes (even count), return the second middle. For example, middle of 1->2->3->4->5->6 is 4.
# your task is to complete this function

'''
class node:
    def __init__(data):
        self.data = data
        self.next = None
'''
class Solution:
    #  Should return data of middle node. If linked list is empty, then  -1
    def getMiddle(self, head):
        # Code here
        # return the value stored in the middle node
        x=head
        y=head
        
        while y and y.next:
            x=x.next 
            y=y.next.next
        return x.data
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Frequencies in a Limited Array
Difficulty: EasyAccuracy: 27.64%Submissions: 366K+Points: 2Average Time: 10m
You are given an array arr[] containing positive integers. The elements in the array arr[] range from 1 to n (where n is the size of the array), and some numbers may be repeated or absent. Your task is to count the frequency of 
all numbers in the range 1 to n and return an array of size n such that result[i] represents the frequency of the number i (1-based indexing).

